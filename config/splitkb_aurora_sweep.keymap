/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "../zmk-nodefree-config/helper.h"


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};
&lt {
    tapping-term-ms = <200>;
};

/* source keypos definitions */
#include "../zmk-nodefree-config/keypos_def/keypos_36keys.h"

/* Homerow mods */
#define QUICK_TAP_MS 175
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH1 LH0 RH0 RH1                                              // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <25>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/* Sticky shift*/
ZMK_BEHAVIOR(shft, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <175>;
    quick-tap-ms = <125>;
    bindings = <&mo>, <&sk>;
)

/ {

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp Q        &kp W       &kp E       &kp R        &kp T                       &kp Y &kp U        &kp I       &kp O       &kp P
            &hml LCTRL A &hml LALT S &hml LCMD D &hml LSHFT F &kp G                       &kp H &hmr RSHFT J &hmr RCMD K &hmr RALT L &hmr RCTRL SEMI
            &kp Z        &kp X       &kp C       &kp V        &kp B                       &kp N &kp M        &kp CMMA    &kp DOT     &kp SLASH
                                                    &shft 3 LSHFT &lt 2 SPACE        &kp RET &lt 1 SPACE
            >;
        };

        right_layer {
            bindings = <
            &kp TILDE  &kp EXCL     &kp AT    &kp HASH   &kp DLLR       &kp DQT &kp LPAR  &kp RPAR   &trans   &kp MINUS
            &kp TAB    &kp PRCNT    &kp CARET &kp AMPS   &kp STAR       &kp SQT &kp LBRC  &kp RBRC   &trans   &kp EQUAL
            &trans     &trans       &trans    &trans     &trans         &trans  &kp LBKT  &kp RBKT   &trans   &kp BSLH
                                                  &trans  &trans      &trans &trans
            >;
        };

        bottom_layer {
            bindings = <
            &trans   &trans   &trans    &trans   &trans           &trans  &kp N1  &kp N2   &kp N3   &trans
            &trans   &trans   &trans    &trans   &trans           &trans  &kp N4  &kp N5   &kp N6   &trans
            &bt BT_CLR &bt BT_NXT &bt BT_PRV &trans   &trans           &trans  &kp N7  &kp N8   &kp N9   &kp N0
                                            &trans  &trans     &trans &trans
            >;
        };

        left_layer {
            bindings = <
            &kp GRAVE  &kp EXCL     &kp AT    &kp HASH   &kp DLLR       &trans &kp BSPC  &kp UP   &kp DEL   &trans
            &kp TAB    &kp PRCNT    &kp CARET &kp AMPS   &kp STAR       &trans &kp LEFT  &kp DOWN &kp RIGHT &trans
            &trans     &trans       &trans    &trans     &trans         &trans &trans    &trans   &trans    &trans
                                                  &trans  &trans      &trans &trans
            >;
        };

    };
};
